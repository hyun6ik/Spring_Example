pipeline {
  agent { label 'master' }

  parameters {
    booleanParam(name : 'BUILD_DOCKER_IMAGE', defaultValue : true, description : 'BUILD_DOCKER_IMAGE')
    booleanParam(name : 'PROMPT_FOR_DEPLOY', defaultValue : false, description : 'PROMPT_FOR_DEPLOY')
    booleanParam(name : 'DEPLOY_WORKLOAD', defaultValue : true, description : 'DEPLOY_WORKLOAD')

    // CI
    string(name : 'AWS_ACCOUNT_ID', defaultValue : '705494525874', description : 'AWS_ACCOUNT_ID')
    string(name : 'DOCKER_IMAGE_NAME', defaultValue : 'spring-example', description : 'DOCKER_IMAGE_NAME')
    string(name : 'DOCKER_TAG', defaultValue : '1', description : 'DOCKER_TAG')

    // CD
    string(name : 'TARGET_SVR_USER', defaultValue : 'ec2-user', description : 'TARGET_SVR_USER')
    string(name : 'TARGET_SVR_PATH', defaultValue : '/home/ec2-user/', description : 'TARGET_SVR_PATH')
    string(name : 'TARGET_SVR', defaultValue : '10.0.103.94', description : 'TARGET_SVR')
  }

  environment {
    REGION = "ap-northeast-2"
    ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
    ECR_DOCKER_IMAGE = "${ECR_REPOSITORY}/${params.DOCKER_IMAGE_NAME}"
    ECR_DOCKER_TAG = "${params.DOCKER_TAG}"

    CODEBUILD_NAME = "hyun6ik-jenkins-slave-codebuild"
    CODEBUILD_ARTIFACT_S3_NAME = "hyun6ik-jenkins-slave-artifact-codebuild-s3"
    CODEBUILD_ARTIFACT_S3_KEY = "${currentBuild.number}/hyun6ik-jenkins-slave-codebuild"
    CODEDEPLOY_NAME = "spring-example-codedeploy-app"
    CODEDEPLOY_GROUP_NAME = "dev-codedeploy-group"
  }

  stages {
    stage('============ Build Docker Image ============') {
        when { expression { return params.BUILD_DOCKER_IMAGE } }
        agent { label 'master' }
        steps {
            awsCodeBuild(
              credentialsType: 'keys',
              region: "${REGION}",
              projectName: "${CODEBUILD_NAME}",
              sourceControlType: 'jenkins',
              sseAlgorithm: 'AES256',
              buildSpecFile: "deploy/codebuild/buildspec.yml",
              artifactTypeOverride: "S3",
              artifactNamespaceOverride: "NONE",
              artifactPackagingOverride: "ZIP",
              artifactPathOverride: "${currentBuild.number}",
              artifactLocationOverride: "${CODEBUILD_ARTIFACT_S3_NAME}"
            )
        }
    }
    stage('============ Deploy workload ============') {
        when { expression { return params.DEPLOY_WORKLOAD } }
        agent { label 'master' }
        steps {
            echo "Run CodeDeploy with creating deployment"
            script {
                sh'''
                    aws deploy create-deployment \
                        --application-name ${CODEDEPLOY_NAME} \
                        --deployment-group-name ${CODEDEPLOY_GROUP_NAME} \
                        --region ${REGION} \
                        --s3-location bucket=${CODEBUILD_ARTIFACT_S3_NAME},bundleType=zip,key=${CODEBUILD_ARTIFACT_S3_KEY} \
                        --file-exists-behavior OVERWRITE \
                        --output json > DEPLOYMENT_ID.json
                '''
                def DEPLOYMENT_ID = sh(script: "cat DEPLOYMENT_ID.json | grep -o '\"deploymentId\": \"[^\"]*' | cut -d'\"' -f4", returnStdout: true).trim()
                echo "$DEPLOYMENT_ID"
                sh "rm -rf ./DEPLOYMENT_ID.json"
                def DEPLOYMENT_RESULT = ""
                while("$DEPLOYMENT_RESULT" != "\"Succeeded\"") {
                    DEPLOYMENT_RESULT = sh(
                        script:"aws deploy get-deployment \
                                    --region ${REGION} \
                                    --query \"deploymentInfo.status\" \
                                    --deployment-id ${DEPLOYMENT_ID}",
                        returnStdout: true
                    ).trim()
                    echo "$DEPLOYMENT_RESULT"
                    if ("$DEPLOYMENT_RESULT" == "\"Failed\"") {
                        currentBuild.result = 'FAILURE'
                        break
                    }
                    sleep(10) // sleep 10s
                }
                currentBuild.result = 'SUCCESS'
            }
        }
    }
  }
}