pipeline {
  agent any

  parameters {
    booleanParam(name: "BUILD_DOCKER_IMAGE", defaultValue: true, description: 'BUILD_DOCKER_IMAGE')
    booleanParam(name: "RUN_TEST", defaultValue: true, description: 'RUN_TEST')
    booleanParam(name: "BUILD_TEST", defaultValue: true, description: 'BUILD_TEST')
    booleanParam(name: "PUSH_DOCKER_IMAGE", defaultValue: true, description: 'PUSH_DOCKER_IMAGE')
    booleanParam(name: "DEPLOY_WORK_LOAD", defaultValue: true, description: 'DEPLOY_WORK_LOAD')

    // CI
    string(name : 'AWS_ACCOUNT_ID', defaultValue : '705494525874', description : 'AWS_ACCOUNT_ID')
    string(name : 'DOCKER_IMAGE_NAME', defaultValue : 'spring-example', description : 'DOCKER_IMAGE_NAME')
    string(name : 'DOCKER_TAG', defaultValue : '1', description : 'DOCKER_TAG')

    // CD
    string(name : 'TARGET_SVR_USER', defaultValue : 'ec2-user', description : 'TARGET_SVR_USER')
    string(name : 'TARGET_SVR_PATH', defaultValue : '/home/ec2-user/', description : 'TARGET_SVR_PATH')
    string(name : 'TARGET_SVR', defaultValue : '10.0.3.61', description : 'TARGET_SVR')
  }

  environment {
    REGION = "ap-northeast-2"
    ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
    ECR_DOCKER_IMAGE = "${ECR_REPOSITORY}/${params.DOCKER_IMAGE_NAME}"
    ECR_DOCKER_TAG = "${params.DOCKER_TAG}"
  }

  stages {

    stage('=============== Run Build ===============') {
        when {
            expression { return params.BUILD_TEST }
        }
        agent { label 'build' }
        steps {
            sh('chmod +x gradlew')
            sh('./gradlew clean build')
        }
    }

    stage('=============== Build Docker Image ===============') {
        when {
            expression { return params.BUILD_DOCKER_IMAGE }
        }
        agent { label 'build' }
        steps {
            dir("${env.WORKSPACE}") {
                sh 'docker build -t ${ECR_DOCKER_IMAGE}:${ECR_DOCKER_TAG} .'
            }
            echo "Build Docker Image"
        }
        post {
            always {
                echo "Docker Build Success"
            }
        }
    }


    stage('=============== Push Docker Image ===============') {
        when {
            expression { return params.PUSH_DOCKER_IMAGE }
        }
        agent { label 'build' }
        steps {
           echo "Push Docker Image to ECR"
           sh '''
                aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
                docker push ${ECR_DOCKER_IMAGE}:${ECR_DOCKER_TAG}
           '''
        }
    }



}