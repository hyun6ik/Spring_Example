pipeline {
  agent any

  parameters {
    booleanParam(name: "GIT_CHECKOUT", defaultValue: true, description: 'GIT_CHECKOUT')
    booleanParam(name: "BUILD_DOCKER_IMAGE", defaultValue: true, description: 'BUILD_DOCKER_IMAGE')
    booleanParam(name: "RUN_TEST", defaultValue: true, description: 'RUN_TEST')
    booleanParam(name: "BUILD_TEST", defaultValue: true, description: 'BUILD_TEST')
    booleanParam(name: "PUSH_DOCKER_IMAGE", defaultValue: true, description: 'PUSH_DOCKER_IMAGE')
    booleanParam(name: "DEPLOY_WORK_LOAD", defaultValue: true, description: 'DEPLOY_WORK_LOAD')
  }

  environment {
    REGION = "ap-northeast-2"
  }

  stages {
    stage('CheckOut') {
        when {
            expression { return params.GIT_CHECKOUT}
        }
        steps {
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/hyun6ik/Spring_Example.git']]])
        }
    }

    stage('=============== Run Build And Test Code===============') {
        when {
            expression { return params.BUILD_TEST }
        }
        steps {
            sh('gradle clean build')
        }
    }

    stage('=============== Build Docker Image ===============') {
        when {
            expression { return params.BUILD_DOCKER_IMAGE }
        }
        steps {
            dir("${env.WORKSPACE}") {
                sh 'docker build -t hyun6ik/spring-example .'
            }
            echo "Build Docker Image"
        }
        post {
            always {
                echo "Docker Build Success"
            }
        }
    }


    stage('=============== Push Docker Image ===============') {
        when {
            expression { return params.PUSH_DOCKER_IMAGE }
        }
        steps {
           echo "Push Docker Image"
        }
    }

    stage('=============== Deploy Work Load ===============') {
        when {
            expression { return params.DEPLOY_WORK_LOAD }
        }
        steps {
            echo "Deploy Work Load"
        }
    }
  }
}